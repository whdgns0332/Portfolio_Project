2020-09-15
	CMN_Layout.cs 생성
		ControlLayout Class
			MakeCurvedBorder(Control ctrl, int curvedAmount_X, int curvedAmount_Y)
				Control의 테두리를 둥글게 만드는 함수
	FRM_KeyBoardUI
	FRM_NumPadUI
		배경 이미지 할당
		버튼에 이미지를 할당
		Text 필드를 이용시 이미지와 Text가 겹쳐 보기 안좋으므로 Tag 필드를 이용하도록 수정
		(Right Shift 미완료, Exit 버튼 추가 필요)

2020-09-16
	FRM_KeyBoardUI
	FRM_NumPadUI
		Right Shift 추가 완료
		Exit 추가 완료
	CMN_Layout
		ControlLayout Class
			Control_Sizing, Control_Positioning 함수 생성
			(폼 화면의 비율에 맞게 컨트롤의 크기, 위치값을 조절하는 함수)
		FormLayout Class
			MakeCurvedBorder(Form frm, int curvedAmount_X, int curvedAmount_Y)
				Form의 테두리를 둥글게 만드는 함수
	FRM_MessageBox 생성
		커스텀 MessageBox 사용
		(Normal 모드와 OkCancel 모드 2개를 구현함)
		화면 크기에 맞춘 크기, 위치 조절 완료
	FRM_Login
		1차적인 이미지 적용 완료
		화면 크기에 맞춘 크기, 위치 조절 완료

	FRM_Process도 화면에 맞춰 크기 조절을 할 수 있도록 수정해야함
	(Main의 경우 Mdi Container의 크기 수정을 위한 함수를 FormLayout Class에 추가해야함)
	(KeyBoard와 NumPad도 할 수 있으면 좋겠지만 노가다가 동반될 것임)

2020-09-17
	전체
		속성으로 지정해둔 배경 이미지를 코드를 통해 할당하도록 변경함
		(배경을 원하는대로 변경할 수 있게됨)
	FRM_Main
		화면에 맞춘 크기, 위치 조절 완료
		ini파일을 통한 창 크기 조절 지원
	FRM_Process
		화면에 맞춘 크기, 위치 조절 완료
		배경 이미지 할당
		차트 추가
		(품질 체크 항목별로 TabControl에 Tab을 생성해 각각 Chart로 표현하며 StripLine을 이용해 품질 경계 영역을 표시함)
		(품질 범위를 넘어서면 탭 이름을 붉게 할 수 있도록 준비를 해둠 - 차트를 갱신할 때마다 모든 탭의 이름이 붉게 변하도록 한 상태)
		(매 갱신마다 점을 전부 지우고 다시 그리는 식으로 일단 구현해 놓았지만 점을 하나 지우고 하나 새로 그리는 식의 구현을 하는게 목표)
	CMN_Layout
		FormLayout Class 삭제 및 ControlLayout Class에 병합
		(Form도 Control의 일종이었음)
	FRM_MessageBox
		YesNo모드를 추가 구현
		(Yes No버튼의 이미지는 할당을 안했으므로 해줘야함)
2020-09-18
	FRM_Process
		차트
			범위를 넘어서는 값에 대해서 노란 점으로 표시하고 해당하는 탭의 이름을 붉게 표시하도록 구현함
			점을 전부 지우고 다시 그리는 모드(RefreshAll)와 점을 하나 지우고 하나 새로 그리는 모드(ReplaceOne)의 2가지로 구분했음
				RefreshAll은 최초 1회만 실행되며, 그 후로는 ReplaceOne 모드로 계속 실행됨
	CMN_DB_Connect
		Search 함수를 수정해 리턴형을 Bool로 바꿔서 통신 성공 여부를 리턴하게 하고, 기존의 DataSet은 out 매개변수로 리턴받게 함
	FRM_LogIn
		CMN_DB_Connect의 수정된 Search함수를 이용해 로그인 실패 시 통신 오류로 인한 것인지, ID/PW를 잘못 입력한 것인지를 구분지어 MessageBox의 내용을 출력하게 하였음

	+ 지윤이한테서 받은 파일 및 코드를 적절히 합쳐서 UI를 조정함

2020-09-25
	FRM_Process
		Cmb_Die_SelectedIndexChanged를 Display Infomations Region 내로 이동
			금형 이미지 폴더를 Resources 내로 이동 및 해당 폴더의 Ini 처리 완료
			(금형 이미지의 이름을 금형 코드로 지정하고 있는데 임의의 이름을 넣을 수 있도록 DB에 해당 금형의 이미지 이름을 저장하면 좋을것 같아보임)
			그 외 이미지를 하드코딩해 할당하던 코드를 ini를 사용하도록 수정

		Cmb_Order_SelectedIndexChanged 함수 내에서 금형의 정보를 찾는 Sql 구문및 관련 코드를 일부 수정

		Order Region 추가 및 Btn_OrderStart_Click을 Order Region 내로 이동

		Txt_DefectAmount_TextChanged의 내용을 Txt_DefectAmount_Click에 합치고 TextChanged 이벤트를 삭제함
			(생각해보니 굳이 구별할 이유가 없어보이고 구별하더라도 TextChanged로 구별해야할 이유는 더더욱 없었음)

		제조 물품수와 불량품 수를 세던 List를 삭제하고 생산 대기 List와 생산 완료 List를 생성함
			또한 현재 진행중인 작업지시의 제조 물품수와 불량품 수를 입력받는 int 변수를 생성함

	CMN_Layout
		SetImage 및 SetBackgroundImage 함수 생성
			이미지 할당시에 try catch문을 적용해 exception 발생시에 대응하도록 함

	+ 지윤이한테서 받은 파일 및 코드를 적절히 합쳐서 UI를 조정함

2020-10-05
	FRM_Select
		FRM_Process에서 사용하던 콤보박스가 크기가 작아 터치로 선택하기 힘들것이라는 지적을 받아 항목의 선택을 위해 제작한 Form
			Dictionay<object, string>을 받아 해당 내용을 각각 버튼으로 출력한다
			(object는 해당 항목을 선택했을때 실질적으로 사용할 내용을, string은 항목의 버튼에 출력할 Text를 담는다)

	FRM_Process
		지윤이가 UI를 조절함
		콤보박스를 사용하던 부분을 FRM_Select를 사용하도록 일부 수정(금형쪽 콤보박스의 수정이 추가로 필요 및 작업자의 선택이 가능하도록 해야함)
		차트를 새로운 Form에 띄워 완전히 구성이 변경되므로 차트 부분 코드가 삭제됨
		
	FRM_Select
		목록중에 하나를 선택받아 선택한 항목을 리턴하는 폼을 생성함

2020-10-06
	FRM_Process
		콤보박스를 사용하던 부분을 FRM_Select를 사용하도록 변경 완료

	FRM_Process & FRM_Login
		저장 프로시저를 통해 DB와 통신하도록 수정
		한번 Form을 실행한 뒤 다른 Form을 실행했다 다시 원래 Form을 켜면 1280 * 720이어야할 사이즈가 1292 * 755가 되는 문제가 발생했으나
			Size를 조정하는 코드를 제거하고 this.Dock = DockStyle.Fill을 지정해 해결함

	FRM_Chart
		병합 완료

2020-10-08
	FRM_Select
		버튼에 이미지 할당 완료 (content 버튼, scroll 버튼 2개, exit 버튼)

	FRM_Process
		미세 조정
			Txt박스에 저장된 값을 직접 불러오는 코드를 GetOrderCode 등의 함수를 통해 간접적으로 받아오도록 변경
			(저장하는 방식이 Text에서 Tag로 바뀌는 등의 수정을 하고나니 해당 부분 전체를 고쳐야 한다는 점이 싫었음)

			SelectOrder 함수 내에서 GetOrderData 함수를 호출하지 않고 SelectOrder에서 OrderCode를 리턴하게 한 뒤 리턴받은 값으로 GetOrderData를 호출하게 함

		Txt_User와 Txt_DayNight에 FRM_Select를 이용해 선택이 가능하도록 함

2020-10-10
	FRM_MessageBox
		버튼의 설정을 위한 코드를 함수로 만들어 코드의 중복을 줄이고 간단하게 만듬

	FRM_Process
		주문 시작, 종료에 관한 코드를 정리
		(주문을 List 형태로 관리할 필요가 없어졌기에 코드가 단순해짐)
		상단에 Title Text를 ini파일로부터 받아 출력하도록 수정
		병합 완료(UI 조정)

	FRM_Chart
		병합 완료

	FRM_Main
		메뉴 목록 및 exit 버튼을 하단으로 옮김 (버튼의 크기를 작게 조절할것)

2020-10-17
	FRM_Process
		FRM_Select를 응용해 우측에 작업지시 목록을 출력하는 FlowLayoutPanel을 생성
			(목록 내의 개별 작업지시는 각각 1개의 Label로 출력함)
		그에 따라 필요없어진 Txt_Order를 삭제하고 그에 따른 처리 완료

2020-10-20
	FRM_Process
		작업 시작, 종료의 구현 수정 완료
		[작업을 수행하는데 있어서 클릭을 최소화
			생산 품목에 따라 다르지만 현재 프로젝트 대상 품목에 대해서는 모든 라인에 정량 생산은 거의 발생하지 않는다고 함
				따라서 목표생산량을 지정한다고 해서 반드시 목표생산량만큼만 생산하지는 않는다고
				(재고 확보를 위해 추가로 만드는 경우도 있다고 하고, 상황에 따라 목표생산량보다 더 적게 생산할 수도 있다고 함)
				(목표생산량의 설정은 그동안의 불량률 통계를 고려하여 실제 목표보다 추가해 이뤄지는데
					운이 좋다면 목표생산량보다 더 적게 생산하고도 필요한 정상품의 수를 맞출수도 있다)
				(불량품의 수를 사용자가 입력하기에 더더욱 그렇다)

			따라서 작업의 종료 기준은 목표생산량만큼 생산했느냐가 아니라 작업자의 판단 하에 결정되어야함
			(작업자의 정상적인 지시로 작업이 종료되었느냐, 설비고장이나 재료부족 등으로 작업이 비정상적 종료되었느냐를 구분해야함
				온도값이 오랫동안 범위를 벗어나는 등의 이상이 발생한다고 작업이 자동 중단되는 시스템의 존재를 고려하지는 않는다 - 즉 없다고 가정한다
				따라서 비정상적 상황이 발생시에 생산을 중단하는 것도 사용자인 만큼 더더욱 비정상적 종료를 확인해야한다
				이렇게 확인해 결과 테이블에 비정상 종료 여부를 기록하게 될 경우 생산이 필요한 작업지시의 목록을 찾는것이 더 수월해질것)]

			List로 진행할 작업지시 목록을 관리할 필요가 사라져서 이쪽 관련 구조가 더 간단해짐
			[결과 테이블에 기록된 생산량이 목표생산량을 넘는지를 확인하는 것보다 단지 비정상 종료인지를 확인하는 것이 훨씬 쉽다]

			{기기를 작동시키고 종료시키는 코드의 작성이 추후 요구됨}

		긴급정지된 이력이 존재하는 작업지시를 선택했을 때 목표 생산량에서 이미 생산한 분량을 빼도록 구현완료

	DB_Connect
		저장 프로시저의 처리에 있어서 매개변수로 null을 넣을 경우 문자열 처리 관련해 버그가 생겼던 것을 해결함

	Database
		작업지시의 목록을 가져올 때 미완료 상태로 긴급 종료한 작업지시도 가져오도록 테이블 구조를 변경하고 저장 프로시저를 수정함

2020-10-21
	FRM_Process
		OrderFinish 함수에서 처리 순서의 문제로 발생한 버그의 해결
		작업지시를 선택시에 주야간 코드가 자동으로 입력되도록 수정(임의 입력 기능은 그대로 유지됨)

	FRM_Main
		하단 메뉴바의 작업지시, 로그아웃, 종료 버튼을 사각형 버튼으로 변경
		(노란색 작업시작 버튼과 유사하게 변경하라는 지시가 있었음)

	FRM_Login
		로그인 시에 로그인한 유저의 정보(이름, 부서, 직책)을 받도록 설정함
		ID, PW를 나타내던 그림을 제거하고 ID, PW 문자로 변경함

	CMN_Layout
		텍스트를 Label의 이미지 위에 그려넣기 위한 DrawTextOnLabel 함수를 생성

2020-10-22
	FRM_Process
		온도 차트 관련 작업 진행
		(추가로 해당 품질 평가 요소의 Maximum, Minimum 값을 가져오는 기능이 필요하며
		       또 InitializeChart 함수 내에서 품질 평가 요소의 명칭을 가져와 LegendText에 할당하는 작업이 필요함)
		온도 이외의 차트는 진행예정

2020-10-23
	FRM_Process
		품질 평가 요소의 Maximum, Minimum 값을 가져오도록 추가 (범위를 벗어나는 값에 해당하는 점을 붉게 표시하는데 필요)
		       또 InitializeChart 함수 내에서 품질 평가 요소의 명칭을 가져와 LegendText에 할당함
		크기 차트에 대해서도 작업 진행 완료

	FRM_Main
		FRM_Process 내에 차트를 구현해서 필요가 없어졌으므로 차트 버튼을 삭제함

	FRM_Chart
		FRM_Process 내에 차트를 구현해서 필요가 없어졌으므로 삭제함

2020-10-24
	FRM_Process
		차트를 대폭 수정
			Legend를 안보이게 수정함
			무게 차트 삭제
			온도 2개를 각각의 탭에 별도의 차트로 나타내게 함
			그 외에 데이터 탭을 추가해 최근 n개의 내경, 외경 온도 등의 데이터를 받아 표시하게 함
		일부 글씨체를 Tahoma 글씨체로 수정

		작업 개시, 종료 시에 TB_PLC_Config의 값을 수정함으로써 IO서버의 동작을 제어하도록 함

	FRM_Main
		버튼의 글씨체를 Tahoma 글씨체로 통일함

	DB
		TB_PLC_Config 테이블을 생성함
			(IO서버와의 통신을 위한 테이블)
		TB_Q_Control 테이블에 Rep_Data Column을 생성
			(항목당 1분에 1개의 데이터를 받아오기 위한 수단으로, 1분에 60개 꼴로 쌓이는 데이터 중 00초에 저장되는 1개만 True로 설정하고 나머지는 False로 설정할 예정)

2020-10-27
	FRM_Process
		DataGridView의 스크롤을 드래그 및 버튼을 통해 가능하도록 구현함
		(특히 버튼의 경우 꾹 누르고 있는 것으로 자동 스크롤을 실행하도록 구현)

		생산량 값을 자동 증가하도록 하지 않고 DB를 통해 받아오도록 구현함

		기기 번호를 선택하지 않을 경우 Ini파일에 저장된 기본값을 사용하도록 구현함

	CMN_Layout
		Positioning 함수의 기본값을 Left, Top으로 수정
		그에 따라 이 함수를 호출하는 곳의 매개변수 값을 수정함

2020-10-28
	CMN_DB_Connect
		ExecuteProcedure 함수를 SqlParameter를 사용하는 방식으로 수정함

	IOServer 프로그램
		다음과 같은 기능을 구현함
		1. 좌측 상단에는 현재 시간을 표시
		2. 상단에는 ini파일로부터 받아온 PLC의 IP, Port를 출력
			(PLC에 연결할 때 실제로 해당 IP, Port를 사용한다)
		3. IP, Port Label 아래에는 현재 연결상태(Connected, Disconnected 등)를 표시하는 Label을 만듬
		4. 우측 상단에는 PLC, Auto 버튼을 생성
		5. PLC, Auto 버튼 아래에 시작, 종료 버튼을 생성
		6. Auto 모드에서 시작 버튼을 누를 시 자동으로 생산실적, 내경, 외경온도 데이터를 랜덤 생성해 DB에 업로드한다

		PLC Mode에 대해서는 구현된 게 아직 없음
		(PLC와의 통신, PLC와의 연결이 끊겼을 때 연결상태 표시 Label을 수정하는 동작 등을 구현해야함)

2020-10-29
	IOServer 프로그램
		랜덤 생성 모드에서 Config의 R, W값을 판별하도록 수정함
				DataGridView에 생성한 데이터를 출력하도록 함
		(랜덤 생성을 위해 Random 클래스를 사용하고 있는데 좋은 랜덤 생성 방식이 아니라 랜덤에 규칙성이 생겨버림)

	FRM_Process
		Rep_Data값이 True(1)인 데이터만 가져와 차트에 출력하도록 나타냄

2020-10-30
	Resource
		금형 이미지를 적당히 인터넷에서 구해서 넣음

	DB
		금형 이미지 파일명을 금형 테이블에 저장하게 함
		(FRM_Process에서 금형 이미지를 불러올 때 파일명에 해당하는 이미지를 가져오게 된다. 이 값이 null이거나 비었다면 [금형코드.png] 이미지를 가져오게 된다)

2020-10-31
	FRM_Process
		DB로부터 받은 품질 데이터를 나타내는 DataGridView를 내경온도, 외경온도, 생산실적의 3개 분야에 대해 각각 1개씩의 DataGridView를 생성해 할당하게 함
			또한 Value에 대해 소숫점 아래 2자리까지만 표시하도록 함
			스크롤 버튼이 모든 DataGridView를 스크롤하도록 수정함
		작업 설비당 1개씩 설치되는 프로그램이므로 수행하는 공정 자체가 다른 작업지시에 대한 정보를 받아올 필요성이 없음
			따라서 기기번호에 해당하는 공정에 맞는 작업지시만을 받아오도록 처리함
			(덤으로 작업지시를 선택했을때 해당 작업지시에 기본적으로 지정된 기기의 정보도 같이 출력하도록 함)

2020-11-03
	프로젝트 전체
		글씨체를 Tahoma(전체적인 폰트)와 ArialBlack(일부 내용에 사용되는 폰트)의 2종으로 통일함
		화면의 크기에 따라 폰트의 크기를 자동 조절 하도록 수정
	FRM_Process
		새로 제공된 이미지를 활용한 UI 개선 작업 완료
		(작업지시 목록의 버튼을 Label 대신 Panel로 바꿔서 Label 2개를 넣어 일자 / 품목&수량 간 다른 폰트 크기를 지원을 추가해볼 수 있음)
	FRM_Main
		새로 제공된 이미지를 활용한 UI 개선 작업 완료
	FRM_Login
		새로 제공된 이미지를 활용한 UI 개선 작업 완료
	FRM_Select
		새로 제공된 이미지를 활용한 UI 개선 작업 완료
	FRM_MessageBox
		새로 제공된 이미지를 활용한 UI 개선 작업 완료

2020-11-04
	FRM_Process & FRM_Select
		itembox.gif를 사용하는 버튼에 대해서 글자 색상을 RoyalBlue로 변경함
		작업지시 목록 및 Frm_Select의 스크롤 버튼에 대해 CountTimer을 반영함

	FRM_Process
		생산품 수를 표시할때 정상품 수가 목표 수량을 넘겼으면 정상품 창의 배경색을 PaleGreen으로 표시하도록 함

	IOServer 프로젝트
		DataGridView에 데이터가 생성된 시점을 기록하게 함
				한개의 Row에 데이터가 생성된 시간과 생성된 내경온도, 외경온도, 생산량 데이터를 모두 표현하게 함
				최대 Row의 갯수를 200개로 제한함
				소수 자릿수 제한 없이 표현이 가능하게 함
		제공된 이미지를 통한 UI 개선을 완료함

2020-11-05
	FRM_Process
		차트에 표시할 점을 가져오는 프로시저가 최근->오래된 순으로 데이터를 저장한 것을 순서 그대로 차트에 추가한 탓에
			차트의 마지막 점이 가장 오래된 점이 되어버렸음 -> 실시간으로 새로운 점을 추가하면 최신 점과 선이 연결되는 것이 아니라 가장 오래된 점과 연결됐었음
		차트에 추가하는 순서를 역순으로 오래된->최근 순으로 하는 것으로 해결함
		차트에 실시간으로 점을 추가하더라도 X축 범위가 변동되지 않아 추가된 점들이 차트에 표시되지 않는 문제를 ChartRefresh함수에 X축 범위를 수정하는 코드를 넣어 해결
		또한 DataGridView의 Row 수가 최대치에 달했을 때 Row를 지우는데 오류가 발생했던 것을 해결
			(가장 마지막의 텅 빈 줄은 삭제 시도시 오류가 발생하여 불가능하며, Rows.Count에 포함이 되므로 Rows.Count가 0이 되는 일은 없음)

	IOServer 프로젝트
		unvell.ReoGrid.dll을 이용해 생성한 데이터를 엑셀 파일에 저장하도록 구현함
			(범위를 벗어나는 값에 대해서는 OrangeRed색 배경을 칠하도록 함)
		PLC와 통신해 값을 가져오고 쓰는 기능 작성
			(PLC가 없는 상태이므로 정상 작동 여부는 확인 불가능)

	DB
		PLC_Config 테이블에서 Memory Address를 저장하던 부분을 AddItem에 필요한 Tag 명칭으로 변경함

2020-11-06
	양 프로젝트
		DB_Connect의 GetSqlCommandForProd 함수의 매개변수를 SqlCommand[]로부터 List<Sqlcommand>로 변경
		(배열의 요소인 SqlCommand가 null인 경우를 고려할 필요가 없어짐 - null이면 List에 add하지 않으면 되기 때문)

	IOServer 프로젝트
		프로그램을 켤 시에 Excel파일을 불러오는데 이 과정에서 rowIndex의 초기화가 제대로 이뤄지지 않았던 것을 수정

2020-11-07
	FRM_Process
		차트에 표시할 점의 최대 갯수를 300개로 수정함 (데이터를 받아오는 주기가 크게 줄어들므로 점 갯수가 늘어나야 정상임)
		차트의 갱신 주기가 1초로 크게 줄어들었으므로 차트의 x축 값 Format을 분 까지만 표시하지 않고 초까지 표시하도록 변경함
		차트의 비정상범위를 표시하는 색깔을 MistyRose로 수정했는데 더 엷은 색으로 하시라고 하셔서 Color.FromArgb(255, 240, 236)로 수정함
		작업 종료시 긴급 정지 여부를 확인하던 MessageBox의 Type을 YesNoCancel로 변경하고
			커스텀 텍스트를 이용해 작업 Holding, 작업종료, 취소를 명확하게 구분지음
		DB로부터 데이터를 읽어들이는 주기를 ini파일을 통해 설정할 수 있도록 함
			(단위는 초, 1.5초 등의 소수를 지원함)
	FRM_Messagebox
		메시지박스에서 버튼의 배경색과 텍스트를 커스텀할 수 있게 함

2020-11-09
	IO Server 프로젝트
		값을 랜덤 생성할 때마다 seed += rand.Next(10, 110)으로 시드 값의 변동을 일정하지 않게 하는 것으로 랜덤값의 규칙성을 거의 줄임

2020-11-10
	FRM_Process & IOServer 프로젝트
		DataGridView에서 Datagridview.AllowUserToAddRows가 true라면 Datagridview의 맨 아래 Row에 사용자가 데이터를 입력하기 위한 빈 Row가 생성된다
			이 Row는 삭제가 불가능(삭제 시도시 Exception이 발생)하고 비어있지만 실제로 존재하는 Row로서 취급(이 Row가 존재하는 한 Datagridview.Count는 0이 되지 못한다)되므로
				사용자의 입력을 필요로 하지 않는 본 프로그램에 있어서는 장애물에 지나지 않음
			따라서 해당 속성을 False로 해 빈 Row를 생성하지 않게 하고 그 외에 AllowUser계열의 모든 속성을 False로 하였음
				이 빈 Row를 고려해 코딩했던 부분들을 수정함
		품질 요소에 대해 기록하는 시간 단위를 1초가 아닌 0.1초 단위로 기록할 수 있게 함
			(1초 미만의 주기로 데이터를 읽어 DB에 저장할 때 키 중복 문제로 데이터가 입력되지 않을 수 있다는 문제점이 있었음)
			(DB의 CheckDate에 대해 20자의 한계로 소숫점 이하가 잘리는 문제가 있었어서 문자수 제한을 25자로 수정함)
	IOServer 프로젝트
		온도, 생산량에 대해 타이머를 구분해 서로 다른 주기로 값을 읽어올 수 있도록 함
			(각각 주기는 1초로 지정되어 있음 - 실무에서는 생산실적 주기를 1초, 온도 주기를 0.3초로 사용하지만 현 프로젝트에서는 단순 테스트 용으로 0.3초로 하지는 않는 것으로 함)
		또한 TextBox를 통해 온도, 생산량 타이머의 주기를 실행중에 변경할 수 있도록 함

2020-11-11
	FRM_Process
		동일 공정의 다른 기기에 할당된 작업지시도 필요에 따라 이 기기에서 수행하게 될 수는 있으나
			다른 기기의 온도 정보를 받아올 필요도 이 기기에서 수행한 작업을 다른 기기에서 수행했다고 할 필요도 없다고 보임
		따라서 GetMachCode 함수의 리턴값을 항상 이 프로그램이 사용되는 기기의 코드가 되도록 함

		기존에 Holding한 적이 있는 작업지시에 대해서 기존 생산량을 목표 생산량에서 빼 왔었는데
			목표 생산량에서 빼는 대신 총 생산량 값에 더해서 표시하도록 수정함

	FRM_MessageBox
		메시지 박스가 이미 띄워져 있는 동안 새로운 메시지를 띄우지 않도록 함
		메시지 박스의 버튼 배경으로 사용하던 gif 이미지들이 저장 과정에서 그림에 깨짐이 생기는 등의 문제가 있어 jpg로 변환함

	IOServer 프로젝트
		엑셀 형태로 데이터를 저장할 때 범위를 벗어나는 데이터의 글자색을 흰색으로 바꿈
			(배경이 붉은 계열이라 검은색보다는 흰색이 더 잘 보임)

2020-11-12
	FRM_Process
		작업 시작 버튼의 이미지를 수정
		(이미지에 정확한 폰트를 찾아서 종료라는 텍스트를 맞게 그려넣을 자신이 없었으므로 글자가 없는 이미지로 배경을 수정하고 텍스트를 써넣음)
		차트의 선색, 점색, 점 테두리색을 변경
		Txt_Machine을 통해 기기를 선택할 필요성이 없으므로 선택할 수 없도록 수정함

	DB
		2회 이상 Holding한 작업지시를 다시 생산 개시할 경우 총 생산량을 불러오는데 버그가 있었던 것을 해결
			(10개를 생산했다 Holding한 후 6개를 추가 생산(총 16개 생산)한뒤 다시 Holding한 작업지시를 재개하면 16개에서 시작해야 하나 10 + 16 = 26개에서 시작해버렸음)

2020-11-13
	DB_Connect
		저장 프로시저 실행 결과로 나온 DataSet이 null 또는 비어있는지 확인하는 코드가 많아 이를 HasContent라는 함수로 만들어 중복을 줄임

	FRM_Process
		키패드를 통해 불량품 수를 수정할 때, 정상품 수에 baseAmount가 반영되지 않는 버그를 수정함
						생산량을 넘는 수를 입력시 등장하는 MessageBox에 {생산량}개 이하의 수를 입력하라는 문장을 추가

	DB
		TB_Output에 작업 결과를 저장하는 구조를 수정함 (Holding했던 작업을 다시 진행한 후 종료시 Holding 이전 생산량을 빼고 저장하게 됨)
			이에 따라서 2회 이상 Holding한 작업지시를 해결하기 위해 수정했던 저장 프로시저를 원상태로 복귀시켜 정상 동작을 가능하게 함
			(10개를 생산했다 Holding한 후 6개를 추가 생산한뒤 다시 Holding한 작업지시를 재개하면 16개에서 시작해야 하나 6개에서 시작해버렸음)

	FRM_Result
		일자별 생산 결과를 확인할 수 있는 폼을 추가함
		원하는 기간을 지정하면, 해당 기간동안의 품목별 생산량, 설비별 생산량 DataGridView와 StackedColumn 형식의 Chart로 표시한다
		(DataGridView용의 스크롤 버튼을 추가 예정)

2020-11-14
	IOServer 프로젝트
		PLC와의 연결 완료 및 버그 몇개 수정
		(온도와 생산량 데이터 수집 주기의 구분을 위한 코드가 PLC 모드에서 제대로 작성하지 않았던 부분들이 있었음)

	FRM_Process
		일부 버그 및 미구현 사항 해결
		(기존 생산량을 가져올 때 null이 아니라 ""을 들고와버려서 null 체크로 적절하다는 판정이 나오는 버그
		 다른 작업지시를 선택했을 때 금형의 이미지가 초기화되지 않는 현상
		 작업 진행 중 다른 작업지시를 선택했을 때 작업자, 금형이 초기화되어 원래 작업지시로 돌아와도 복구되지 않는 현상
			     다른 작업지시를 선택했을 때에도 작업의 진행량이 표기되는 현상 - 이것이 새로 선택한 작업지시의 생산량인 것처럼 오해를 불러일으킬 수 있어보였음)
		작업지시 목록을 새로고침하는 버튼을 추가

2020-11-17
	FRM_Process
		작업지시 새로고침 버튼의 이미지 수정
		작업을 수행중이지 않은 상태에서 baseAmount가 없는 작업지시를 선택했을 때 기존의 baseAmount값이 초기화되지 않는 버그를 해결
		작업을 Holding 시 더이상 메모 입력용으로 키보드가 나오지 않도록 수정

	FRM_Result
		버튼 및 라벨들의 UI를 개선
		스크롤 기능 추가
		검색을 실행시에 차트가 초기화되지 않고 검색된 데이터가 기존의 존재 여부에 관계 없이 새로 추가되는 버그를 해결


엑셀 파일을 저장하는데 시간이 걸리기 때문에 저장을 수행하는 동안 작업에 문제가 생길 가능성이 있음
IOServer 프로그램에서 랜덤 모드로 1회 분량의 데이터를 처리하는데 0.3초가 걸리는것으로 추정됨 (좌측 위 시간 표시가 0.3초간 정지)
	(이 부분에 대해서는 대처가 쉽지 않을것으로 보임 - 비동기 처리를 하려고 해도 결국 Text의 변경은 윈폼 특성상 원래 Thread에서만 가능하기 때문이며
		다른 부분을 비동기 처리해서 원래 Thread에 여유를 주려고 해도 다른 부분들도 UI Control에 간섭하는 부분이 있고
			또한 품질 요소별로 처리 시간대가 달라져버려서 요소별로 각각의 줄을 만들어버리는 보기 안좋은 상황이 벌어짐)
	또한 타이머의 주기를 변경 시에 0.5초 정도의 딜레이가 발생하는 것을 확인함
	온도, 생산량 타이머의 주기가 서로 다른 경우 DataGridView에 별개의 줄로 입력되는 상황이 발생함. 보기가 좋지 않을것이라 생각됨
테스트 용도로 분 단위로 엑셀 파일로 저장하도록 한 상태로 IOServer 프로그램을 가동했을 때 저장하는 순간에 0.4초 정도의 딜레이가 있었으나 그 외의 문제는 없었음
	async를 통해 비동기 작업으로 바꿔보려 했지만 오히려 느려지는 등의 문제가 발생했었음
	(결국 데이터가 저장된 Excel 컨트롤에 접근할 수 있는 것은 컨트롤을 생성한 스레드 1개뿐이라는 점이라 그런듯)
작업 지시를 눌렀을 때 생산해야할 제품 코드 또는 진행할 작업지시의 코드를 전송하는 부분이 없음
	(일단 별도의 테이블을 만들어 설비코드 - 진행중 여부 - 작업지시 코드를 저장하게 하면 되긴 함)
금형이 사용된 횟수를 기록할 방법이 있으면 함
	(트리거를 사용할까 했지만 Holding후 재개한 작업에 대해서는 재개 이전의 생산량이 중복으로 더해진다는 문제점이 있어 별도의 프로시저를 만들어 해야할듯...)
작업지시에 대해 작업 개시 일자와 종료 일자가 다른 경우에 대한 고려가 되어 있지 않음
	(2일 이상 차이나는 경우가 없다면 해결이 가능하므로 크게 문제가 되진 않는다)
작업결과 테이블에 기기 코드만 저장이 되고 공정코드는 저장이 되지 않고 있어 공정코드 별로 묶어 확인하기 적절한 구조가 아님
작업지시 목록을 가져오기 위한 저장 프로시저를 봤을 때, 설비 코드 테이블과의 Inner Join이 필요하지 않을 수 있다
작업 완료시 작업완료 테이블에 저장되는 RegisterID값은 선택된 작업자의 ID여야 할 터이나 로그인한 사용자의 ID가 입력되고 있다


MES 만드는데 있어서 통신방식이 다른 PLC 기기들과 통신을 해야한다는 것이 쉽지 않다
	가장 간단한 방법은 PLC 제조사에 API 코드를 달라고 요청하는 것임

실무상의 작동요소
제작에 평균 n이라는 시간이 소모되는 제품이 1.1n시간동안 제작이 되지 않으면 마지막 생산 시간으로부터 n시간 뒤로부터는 비작동으로 취급한다
회사측에서 지정한 휴게, 식사, 교육시간 등 비작업 시간이 되면 자동으로 정지하는 기능
	(해당 시간이 되서 나갈 때 직원이 직접 정지하면 안되냐고? 그렇게 버튼 하나 누르는 것조차 귀찮아하는게 바로 인간이다)


CheckDate < '2020-11-10 14:32:00' // MSSQL에서의 문자열 비교는 단순 부호로 해결이 가능하다
	특정 일자의 값을 찾고 싶다면 where CheckDate Like '2020-11-10%' 와 같이 Like로 해결 가능하다
			(부등호를 이용한 범위 조건은 이상, 미만의 2개를 조건으로 걸어야 하므로 조건이 1개인 Like가 더 소모 시간이 짧은것으로 보임)


Holding시 키보드가 등장하지 않도록 할것
